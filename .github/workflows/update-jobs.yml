name: Update New Grad Jobs

on:
  # Run every 5 minutes
  schedule:
    - cron: '*/5 * * * *'
  
  # Allow manual trigger
  workflow_dispatch:
  
  # Run on push to main branch for testing
  push:
    branches: [main]

# Prevent concurrent executions of the same workflow
concurrency:
  group: update-jobs
  cancel-in-progress: false

jobs:
  update-jobs:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0  # Fetch full history for proper rebasing
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run job scraper
      run: |
        cd scripts
        python update_jobs.py
        
    - name: Check for changes
      id: changes
      run: |
        if git diff --quiet; then
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "changed=true" >> $GITHUB_OUTPUT
        fi
        
    - name: Commit and push changes
      if: steps.changes.outputs.changed == 'true'
      run: |
        git config --local user.email "riteshrana36@gmail.com"
        git config --local user.name "ambicuity"
        git add README.md
        git commit -m "ðŸ¤– Update job listings - $(date -u '+%Y-%m-%d %H:%M UTC')"
        
        # Add random delay to reduce concurrent execution conflicts
        sleep $((RANDOM % 10 + 5))
        
        # Pull latest changes and push with improved retry logic
        max_retries=5
        retry_count=0
        
        while [ $retry_count -lt $max_retries ]; do
          echo "Attempt $((retry_count + 1)) of $max_retries"
          
          # Always fetch latest changes first
          if ! git fetch origin main; then
            echo "Failed to fetch origin/main, retrying..."
            retry_count=$((retry_count + 1))
            sleep $((RANDOM % 5 + 3))
            continue
          fi
          
          # Check if we need to rebase
          if ! git diff --quiet HEAD origin/main; then
            echo "Remote has changes, rebasing..."
            if ! git rebase origin/main; then
              echo "Rebase failed, checking for conflicts..."
              if git status --porcelain | grep -q "^UU\|^AA\|^DD"; then
                echo "Rebase conflicts detected, aborting and retrying..."
                git rebase --abort
                # Reset to original commit and try again
                git reset --hard HEAD~1
                git add README.md
                git commit -m "ðŸ¤– Update job listings - $(date -u '+%Y-%m-%d %H:%M UTC')"
              else
                echo "Rebase failed for unknown reason, aborting..."
                git rebase --abort
              fi
              retry_count=$((retry_count + 1))
              sleep $((RANDOM % 8 + 5))
              continue
            fi
          fi
          
          # Try to push
          if git push origin main; then
            echo "Successfully pushed changes"
            break
          else
            echo "Push failed, will retry..."
            retry_count=$((retry_count + 1))
            
            if [ $retry_count -eq $max_retries ]; then
              echo "Failed to push after $max_retries attempts"
              exit 1
            fi
            
            # Exponential backoff with jitter
            sleep_time=$((2 ** retry_count + RANDOM % 5))
            echo "Waiting ${sleep_time} seconds before retry..."
            sleep $sleep_time
          fi
        done
        
    - name: No changes
      if: steps.changes.outputs.changed == 'false'  
      run: echo "No new jobs found, README unchanged"
